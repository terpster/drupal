<?php

/**
 * @file
 * Provide advanced comment deletion abilities.
 */

use Drupal\Component\Utility\Number;

/**
 * Checks user account access to delete a comment.
 *
 * @param $account object
 *   User account object to check access.
 * @param $comment object
 *   Comment entity object to check access.
 * @return boolean
 *   Returns TRUE or FALSE based on access checks.
 */
function comment_delete_check_access($account, $comment) {
  $config = \Drupal::config('comment_delete.config');

  // Calculate allowable comment deletion threshold.
  $threshold_setting = $config->get('threshold');
  $threshold = $threshold_setting ? (time() - $comment->get('created')->value) > $threshold_setting : 0;

  // Check permissions for any comment.
  if (($account->hasPermission('delete any comment') && !$threshold) || $account->hasPermission('delete any comment anytime')) {
    return TRUE;
  }

  // Check permissions for users own comment.
  if ($comment->get('uid')->target_id == $account->id()) {
    if (($account->hasPermission('delete own comment') && !$threshold) || $account->hasPermission('delete own comment anytime')) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_comment_links_alter().
 */
function comment_delete_comment_links_alter(&$links, \Drupal\comment\CommentInterface $entity, &$context) {
  $account = \Drupal::currentUser();

  // Remove delete link if user doesn't have access.
  if (!comment_delete_check_access($account, $entity)) {
    unset($links['comment']['#links']['comment-delete']);
  }
}

/**
 * Implements hook_form_alter().
 */
function comment_delete_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (preg_match('/comment_(.*)_delete_form/i', $form_id)) {
    $config = \Drupal::config('comment_delete.config');
    $default = $config->get('default_selection');
    unset($form['description']);

    // Define available comment deletion options.
    $options = array();
    if (\Drupal::currentUser()->hasPermission('delete comment replies')) {
      $options[0] = t('Delete comment and replies');
    }
    if (\Drupal::currentUser()->hasPermission('move comment replies')) {
      $options[1] = t('Delete comment and move replies');
    }
    $options[2] = t('Delete comment and keep replies');

    // Provide comment deletion radio options.
    if (count($options) > 1) {
      $form['delete_action'] = array(
        '#type' => 'radios',
        '#title' => t('How should replies to this comment be handled?'),
        '#options' => $options,
        '#required' => TRUE,
        '#default_value' => isset($options[$default]) ? $default : 2,
      );
    }

    // Perform default action when access is limited.
    else {
      $form['delete_action'] = array(
        '#type' => 'hidden',
        '#value' => 2,
      );
    }

    // Override default comment delete submit callbacks.
    $form['actions']['submit']['#submit'] = array('comment_delete_form_submit');
  }
}

/**
 * Submit callback for comment deletion form.
 */
function comment_delete_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $config = \Drupal::config('comment_delete.config');
  $args = explode('/', trim(\Drupal::service('path.current')->getPath(), '/'));
  $comment = entity_load('comment', $args[1]);

  // Perform chosen comment delete actions.
  switch ($form_state->getValue('delete_action')) {

    // Delete comment and replies. Default D8 behavior.
    case 0:
      $comment->delete();
      break;

    // Delete comment and move replies.
    case 1:
      comment_delete_move_replies($comment);
      break;

    // Delete comment and keep replies.
    case 2:
      comment_delete_keep_replies($comment);
      break;
  }

  // Determine redirect route and display success message.
  $entity_id = $comment->getCommentedEntityId();
  switch ($comment->getCommentedEntityTypeId()) {
    case 'node':
      $route_name = 'entity.node.canonical';
      $route_params = array('node' => $entity_id);
      break;
    case 'taxonomy_term':
      $route_name = 'entity.taxonomy_term.canonical';
      $route_params = array('taxonomy_term' => $entity_id);
      break;
    case 'user':
      $route_name = 'entity.user.canonical';
      $route_params = array('user' => $entity_id);
      break;
    case 'comment':
      $route_name = 'entity.comment.canonical';
      $route_params = array('comment' => $entity_id);
      break;
    default:
      $route_name = '<front>';
      $route_params = array();
      break;
  }
  $form_state->setRedirect($route_name, $route_params);
  drupal_set_message(t($config->get('message')));
}

/**
 * Removes comment subject/body to retain replies thread order.
 *
 * @param $comment object
 *   Loaded comment entity object.
 */
function comment_delete_keep_replies($comment) {

  // Retrieve first-level comment replies count.
  $results = db_select('comment_field_data', 'c')
    ->fields('c', array('cid'))
    ->condition('c.pid', $comment->id(), '=')
    ->countQuery()
    ->execute()->fetchField();

  // Remove subject/body when replies exist.
  if ($results > 0) {
    $comment->set('subject', '');
    $comment->set('comment_body', '');
    $comment->save();
  }

  // Remove entire comment when no replies exist.
  else {
    $comment->delete();
  }
}

/**
 * Removes parent comment and moves replies up a thread level.
 *
 * @param $comment object
 *   Loaded comment entity object.
 */
function comment_delete_move_replies($comment) {

  // Retrieve all first-level comment replies to be updated.
  $results = db_select('comment_field_data', 'c')
    ->fields('c', array('cid', 'created'))
    ->condition('c.pid', $comment->id(), '=')
    ->execute();

  // Update parent comment target ID.
  foreach ($results as $data) {
    $reply_comment = entity_load('comment', $data->cid);
    if ($comment->get('pid')->target_id) {
      $reply_comment->set('pid', $comment->get('pid')->target_id);
    }
    else {
      $reply_comment->set('pid', '');
    }
    $reply_comment->save();
  }

  // Delete the parent comment entity.
  $comment->delete();

  // Re-thread comments attached to entity.
  comment_delete_threading($comment->getCommentedEntityTypeId(), $comment->getCommentedEntityId());
}

/**
 * Re-threads comments attached to an entity.
 *
 * @param $entity_type string
 *   The entity type to load.
 * @param $entity_id int
 *   The entity ID to load.
 */
function comment_delete_threading($entity_type, $entity_id) {
  $comments = array();

  // Retrieve all comments attached to entity.
  $results = db_select('comment_field_data', 'c')
    ->fields('c', array('cid', 'pid', 'created'))
    ->condition('c.entity_type', $entity_type)
    ->condition('c.entity_id', $entity_id)
    ->orderBy('c.created', 'ASC')
    ->execute();
  foreach ($results as $data) {
    $comments[] = (array) $data;
  }

  // Collect and calculate new comment threading strings.
  $tree = comment_delete_threading_tree($comments);
  $threads = comment_delete_threading_values($tree);

  // Update comment threads in database table.
  foreach ($threads as $cid => $thread_string) {
    db_update('comment_field_data')
      ->fields(array('thread' => $thread_string .'/'))
      ->condition('cid', $cid)
      ->execute();
  }
}

/**
 * Creates associative array of threaded comments.
 *
 * @param $comments array
 *   Flat array of entity comments.
 * @param $pid int
 *   Parent ID used to recursively create array.
 * @return array
 *   Associative array of threaded comments.
 */
function comment_delete_threading_tree(array $comments, $pid = 0) {
  $branch = array();
  foreach ($comments as $comment) {
    if ($comment['pid'] == $pid) {
      $children = comment_delete_threading_tree($comments, $comment['cid']);
      if ($children) {
        $comment['children'] = $children;
      }
      $branch[] = $comment;
    }
  }
  return $branch;
}

/**
 * Converts threaded comments into associative array of thread strings.
 *
 * @param $tree array
 *   Associtiave array containing comment threading tree.
 * @param $prefix string
 *   Prefix to be prepended to thread strings.
 * @param $threading array
 *   Associative array of existing thread strings.
 * @return array
 *   Accociative array of comment thread strings.
 */
function comment_delete_threading_values($tree, $prefix = '', $threading = array(), $init = TRUE) {
  $thread = $init ? '01' : '00';
  uasort($tree, 'comment_delete_threading_sort');
  foreach ($tree as $comment) {
    $string = (!empty($prefix) ? $prefix .'.' : '') . Number::intToAlphadecimal(sprintf('%02d', $thread++));
    $threading[$comment['cid']] = $string;
    if (isset($comment['children'])) {
      $children = $comment['children'];
      uasort($children, 'comment_delete_threading_sort');
      $child_threading = comment_delete_threading_values($children, $string, $threading, FALSE);
      $threading += $child_threading;
    }
  }
  return $threading;
}

/**
 * Sorts associative array of comments by creation time.
 */
function comment_delete_threading_sort($a, $b) {
  if ($a['created'] == $b['created']) {
    return 0;
  }
  return ($a['created'] < $b['created']) ? -1 : 1;
}
